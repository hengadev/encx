package encx

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"testing"
	"time"

	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/wait"
)

type VaultContainer struct {
	testcontainers.Container
	HTTPSEndpoint string
	RootToken     string
}

func SetupVault(ctx context.Context, t *testing.T) (*VaultContainer, error) {
	rootToken := "test-root-token"

	req := testcontainers.ContainerRequest{
		Image:        "hashicorp/vault:1.19",
		ExposedPorts: []string{"8200/tcp"},
		WaitingFor: wait.ForHTTP("/v1/sys/health").WithPort("8200/tcp").WithStartupTimeout(60 * time.Second).WithStatusCodeMatcher(func(status int) bool {
			return status == 200 || status == 429 || status == 473 || status == 503
		}),
		Env: map[string]string{
			"VAULT_DEV_ROOT_TOKEN_ID":  rootToken,
			"VAULT_DEV_LISTEN_ADDRESS": "0.0.0.0:8200",
			"VAULT_ADDR":               "http://0.0.0.0:8200",
			"VAULT_API_ADDR":           "http://0.0.0.0:8200",
			"VAULT_DISABLE_MLOCK":      "true",
		},
	}

	container, err := testcontainers.GenericContainer(ctx, testcontainers.GenericContainerRequest{
		ContainerRequest: req,
		Started:          true,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to start vault container: %w", err)
	}

	hostIP, err := container.Host(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get vault host IP: %w", err)
	}

	port, err := container.MappedPort(ctx, "8200")
	if err != nil {
		return nil, fmt.Errorf("failed to get vault mapped port: %w", err)
	}

	httpsEndpoint := fmt.Sprintf("http://%s:%s", hostIP, port.Port())

	vaultContainer := &VaultContainer{
		Container:     container,
		HTTPSEndpoint: httpsEndpoint,
		RootToken:     rootToken,
	}

	// Initialize required secrets and engines
	if err := initializeVaultSecrets(vaultContainer); err != nil {
		return nil, fmt.Errorf("failed to initialize vault secrets: %w", err)
	}

	// Verify the secret was created correctly
	if err := verifyVaultSecret(vaultContainer, "secret/data/pepper"); err != nil {
		return nil, fmt.Errorf("failed to verify vault secrets: %w", err)
	}

	return vaultContainer, nil
}

func TeardownVault(ctx context.Context, t *testing.T, container *VaultContainer) {
	if err := container.Terminate(ctx); err != nil {
		t.Fatalf("failed to terminate vault container: %v", err)
	}
}

// initializeVaultSecrets creates the required secrets and enables engines in Vault for testing
func initializeVaultSecrets(vaultContainer *VaultContainer) error {
	// 1. Enable Transit secrets engine (required for encx)
	if err := enableTransitEngine(vaultContainer); err != nil {
		return fmt.Errorf("failed to enable transit engine: %w", err)
	}

	// 2. Create the encryption key for encx
	if err := createTransitKey(vaultContainer, "leviosa-app-key"); err != nil {
		return fmt.Errorf("failed to create transit key: %w", err)
	}

	// 3. Create the pepper secret required by encx (must be exactly 32 characters)
	pepperData := map[string]any{
		"data": map[string]any{
			"value": "testpepper123456testpepper123456", // Exactly 32 chars
		},
	}

	if err := createVaultSecret(vaultContainer, "secret/data/pepper", pepperData); err != nil {
		return fmt.Errorf("failed to create pepper secret: %w", err)
	}

	return nil
}

// enableTransitEngine enables the Transit secrets engine at the default path
func enableTransitEngine(vaultContainer *VaultContainer) error {
	url := fmt.Sprintf("%s/v1/sys/mounts/transit", vaultContainer.HTTPSEndpoint)

	mountData := map[string]any{
		"type":        "transit",
		"description": "Transit engine for encx testing",
	}

	jsonData, err := json.Marshal(mountData)
	if err != nil {
		return fmt.Errorf("failed to marshal mount data: %w", err)
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("failed to create mount request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("X-Vault-Token", vaultContainer.RootToken)

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("failed to enable transit engine: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusNoContent {
		return fmt.Errorf("vault returned status %d when enabling transit engine", resp.StatusCode)
	}

	fmt.Println("Transit engine enabled successfully")
	return nil
}

// createTransitKey creates a new encryption key in the Transit engine
func createTransitKey(vaultContainer *VaultContainer, keyName string) error {
	url := fmt.Sprintf("%s/v1/transit/keys/%s", vaultContainer.HTTPSEndpoint, keyName)

	keyData := map[string]any{
		"type": "aes256-gcm96", // Compatible with encx requirements
	}

	jsonData, err := json.Marshal(keyData)
	if err != nil {
		return fmt.Errorf("failed to marshal key data: %w", err)
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("failed to create key request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("X-Vault-Token", vaultContainer.RootToken)

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("failed to create transit key: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusNoContent {
		return fmt.Errorf("vault returned status %d when creating transit key %s", resp.StatusCode, keyName)
	}

	fmt.Printf("Transit key '%s' created successfully\n", keyName)
	return nil
}

// createVaultSecret creates a secret in Vault using the HTTP API
func createVaultSecret(vaultContainer *VaultContainer, path string, data map[string]any) error {
	url := fmt.Sprintf("%s/v1/%s", vaultContainer.HTTPSEndpoint, path)

	jsonData, err := json.Marshal(data)
	if err != nil {
		return fmt.Errorf("failed to marshal secret data: %w", err)
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("failed to create HTTP request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("X-Vault-Token", vaultContainer.RootToken)

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("failed to create secret: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusNoContent {
		return fmt.Errorf("vault returned status %d when creating secret at %s", resp.StatusCode, path)
	}

	return nil
}

// verifyVaultSecret verifies that a secret exists and can be read from Vault
func verifyVaultSecret(vaultContainer *VaultContainer, path string) error {
	url := fmt.Sprintf("%s/v1/%s", vaultContainer.HTTPSEndpoint, path)

	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return fmt.Errorf("failed to create verification request: %w", err)
	}

	req.Header.Set("X-Vault-Token", vaultContainer.RootToken)

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("failed to verify secret: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("vault returned status %d when verifying secret at %s", resp.StatusCode, path)
	}

	var result map[string]any
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return fmt.Errorf("failed to decode verification response: %w", err)
	}

	fmt.Printf("Vault secret verification for %s: %+v\n", path, result)
	return nil
}
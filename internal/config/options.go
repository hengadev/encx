package config

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

// Option represents a configuration option for creating a Crypto instance
type Option func(*Config) error

// NOTE: The following options have been removed in v0.6.0 and are now handled automatically:
// - WithKMSService: Now a required parameter in NewCrypto()
// - WithKEKAlias: Now set via ENCX_KEK_ALIAS environment variable
// - WithPepper: Now auto-generated by ENCX
// - WithPepperSecretPath: Now set via ENCX_PEPPER_SECRET_PATH environment variable
// - WithKeyMetadataDB: Now auto-managed by ENCX

// WithArgon2Params sets the Argon2 hashing parameters
func WithArgon2Params(params *Argon2Params) Option {
	return func(c *Config) error {
		if params == nil {
			return fmt.Errorf("Argon2 parameters cannot be nil")
		}
		validator := NewValidator()
		if err := validator.validateArgon2Params(params); err != nil {
			return fmt.Errorf("invalid Argon2 parameters: %w", err)
		}
		c.Argon2Params = params
		return nil
	}
}

// NOTE: WithKeyMetadataDB has been removed in v0.6.0
// The database is now auto-managed by ENCX for better security and simplicity

// WithDBPath sets the database directory path
func WithDBPath(path string) Option {
	return func(c *Config) error {
		if strings.TrimSpace(path) == "" {
			return fmt.Errorf("database path cannot be empty")
		}

		// Validate directory is writable
		if err := checkDirectoryWritable(path); err != nil {
			return fmt.Errorf("database path validation failed: %w", err)
		}

		c.DBPath = path
		return nil
	}
}

// WithDBFilename sets the database filename
func WithDBFilename(filename string) Option {
	return func(c *Config) error {
		if strings.TrimSpace(filename) == "" {
			return fmt.Errorf("database filename cannot be empty")
		}
		c.DBFilename = filename
		return nil
	}
}

// WithKeyMetadataDBPath sets the full path to the key metadata database
// NOTE: In v0.6.0+, this function sets the DB path but the database connection is auto-managed
func WithKeyMetadataDBPath(path string) Option {
	return func(c *Config) error {
		if strings.TrimSpace(path) == "" {
			return fmt.Errorf("database path cannot be empty")
		}

		// Just set the path - database will be created by NewCrypto
		c.DBPath = filepath.Dir(path)
		c.DBFilename = filepath.Base(path)
		return nil
	}
}

// WithKeyMetadataDBFilename sets the filename for the key metadata database within the default directory
// NOTE: In v0.6.0+, this function sets the DB filename but the database connection is auto-managed
func WithKeyMetadataDBFilename(filename string) Option {
	return func(c *Config) error {
		if strings.TrimSpace(filename) == "" {
			return fmt.Errorf("database filename cannot be empty")
		}

		// Validate that filename doesn't contain path separators
		if strings.ContainsAny(filename, "/\\") {
			return fmt.Errorf("database filename cannot contain path separators")
		}

		// Validate filename length
		if len(filename) > 255 {
			return fmt.Errorf("database filename too long: maximum 255 characters, got %d", len(filename))
		}

		cwd, err := os.Getwd()
		if err != nil {
			return fmt.Errorf("failed to get current working directory for default DB path: %w", err)
		}

		defaultDataDir := filepath.Join(cwd, ".encx")
		if err := os.MkdirAll(defaultDataDir, 0700); err != nil {
			return fmt.Errorf("failed to create default '.encx' directory: %w", err)
		}

		// Just set the filename - database will be created by NewCrypto
		c.DBPath = defaultDataDir
		c.DBFilename = filename
		return nil
	}
}

// WithMetricsCollector sets the metrics collector
func WithMetricsCollector(collector MetricsCollector) Option {
	return func(c *Config) error {
		c.MetricsCollector = collector
		return nil
	}
}

// WithObservabilityHook sets the observability hook
func WithObservabilityHook(hook ObservabilityHook) Option {
	return func(c *Config) error {
		c.ObservabilityHook = hook
		return nil
	}
}

// DefaultConfig creates a default configuration
func DefaultConfig() *Config {
	return &Config{
		Argon2Params: &Argon2Params{
			Memory:      65536, // 64MB
			Iterations:  3,     // 3 iterations
			Parallelism: 4,     // 4 threads
			SaltLength:  16,    // 16 bytes salt
			KeyLength:   32,    // 32 bytes key
		},
		DBPath:     ".encx",
		DBFilename: "metadata.db",
	}
}

// ApplyOptions applies all configuration options to a config
func ApplyOptions(config *Config, options []Option) error {
	for i, opt := range options {
		if err := opt(config); err != nil {
			return fmt.Errorf("option %d failed: %w", i, err)
		}
	}
	return nil
}

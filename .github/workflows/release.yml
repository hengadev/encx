name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Check coverage
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: ${coverage}%"
          if (( $(echo "$coverage < 85" | bc -l) )); then
            echo "Coverage ${coverage}% is below 85% threshold"
            exit 1
          fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Run gosec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -exclude-generated ./...

  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: [test, security]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          # Exclude combinations that don't make sense or aren't commonly used
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          OUTPUT_NAME="encx-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi

          go build -v -ldflags="-s -w \
            -X 'github.com/hengadev/encx.Version=${{ steps.version.outputs.VERSION }}' \
            -X 'github.com/hengadev/encx.GitCommit=${GITHUB_SHA}' \
            -X 'github.com/hengadev/encx.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)' \
            -X 'github.com/hengadev/encx.BuildUser=github-actions'" \
            -o "bin/${OUTPUT_NAME}" \
            ./cmd/encx-gen || echo "No cmd/encx-gen found, skipping binary build"

      - name: Upload artifact
        if: hashFiles('bin/*') != ''
        uses: actions/upload-artifact@v4
        with:
          name: encx-${{ matrix.goos }}-${{ matrix.goarch }}
          path: bin/*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, security, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Extract changelog
        id: changelog
        run: |
          # Extract the section for this version from CHANGELOG.md
          VERSION="${{ steps.version.outputs.VERSION_NUMBER }}"

          # Get the changelog content for this version
          CHANGELOG=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d')

          # If empty, use a default message
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Release ${{ steps.version.outputs.VERSION }}"
          fi

          # Save to file for multiline support
          echo "$CHANGELOG" > release_notes.md

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish to pkg.go.dev
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Trigger pkg.go.dev
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Triggering pkg.go.dev indexing for version $VERSION"
          curl -s "https://proxy.golang.org/github.com/hengadev/encx/@v/${VERSION}.info" || true
          sleep 10
          curl -s "https://pkg.go.dev/github.com/hengadev/encx@${VERSION}" || true
